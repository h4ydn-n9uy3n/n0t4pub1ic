"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/ImageGrid.tsx":
/*!**********************************!*\
  !*** ./components/ImageGrid.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sonner */ \"./node_modules/sonner/dist/index.mjs\");\n\nvar _s = $RefreshSig$();\n\n\nconst MAX_WIDTH = 800;\nconst MAX_HEIGHT = 800;\nconst TARGET_FILE_SIZE = 800 * 1024;\nconst compressImage = async function(dataUrl) {\n    let initialQuality = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.9;\n    return new Promise((resolve, reject)=>{\n        const img = new Image();\n        img.onload = async ()=>{\n            try {\n                const canvas = document.createElement(\"canvas\");\n                let width = img.width;\n                let height = img.height;\n                // Calculate new dimensions while maintaining aspect ratio\n                if (width > height) {\n                    if (width > MAX_WIDTH) {\n                        height = Math.round(height * MAX_WIDTH / width);\n                        width = MAX_WIDTH;\n                    }\n                } else {\n                    if (height > MAX_HEIGHT) {\n                        width = Math.round(width * MAX_HEIGHT / height);\n                        height = MAX_HEIGHT;\n                    }\n                }\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                // Use better image rendering\n                ctx.imageSmoothingEnabled = true;\n                ctx.imageSmoothingQuality = \"high\";\n                ctx.drawImage(img, 0, 0, width, height);\n                // Progressive compression with higher minimum quality\n                let quality = initialQuality;\n                let compressedDataUrl = canvas.toDataURL(\"image/jpeg\", quality);\n                while(compressedDataUrl.length > TARGET_FILE_SIZE && quality > 0.5){\n                    quality -= 0.1;\n                    compressedDataUrl = canvas.toDataURL(\"image/jpeg\", quality);\n                }\n                // If still too large, try one more time with reduced dimensions\n                if (compressedDataUrl.length > TARGET_FILE_SIZE) {\n                    width = Math.round(width * 0.9);\n                    height = Math.round(height * 0.9);\n                    canvas.width = width;\n                    canvas.height = height;\n                    ctx.imageSmoothingEnabled = true;\n                    ctx.imageSmoothingQuality = \"high\";\n                    ctx.drawImage(img, 0, 0, width, height);\n                    compressedDataUrl = canvas.toDataURL(\"image/jpeg\", quality);\n                }\n                resolve(compressedDataUrl);\n            } catch (error) {\n                console.error(\"Image compression error:\", error);\n                reject(error);\n            }\n        };\n        img.onerror = (error)=>{\n            console.error(\"Image loading error:\", error);\n            reject(new Error(\"Failed to load image\"));\n        };\n        img.src = dataUrl;\n    });\n};\nconst saveToLocalStorage = (key, value)=>{\n    try {\n        // Try to save with compression if needed\n        const compressed = value.length > 1024 * 1024 ? value : value;\n        localStorage.setItem(key, compressed);\n        return true;\n    } catch (error) {\n        console.error(\"localStorage error:\", error);\n        // Try to clear old data if storage is full\n        try {\n            localStorage.removeItem(key);\n            localStorage.setItem(key, value);\n            return true;\n        } catch (retryError) {\n            console.error(\"Failed to save after cleanup:\", retryError);\n            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Storage error: Image might be too large\");\n            return false;\n        }\n    }\n};\nconst ImageGrid = (param)=>{\n    let { type, emptySquareColor = \"#FFAFC5\", borderColor = \"#FF8FAB\", textColor = \"#553E4E\" } = param;\n    _s();\n    const [isClient, setIsClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [images, setImages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(Array(9).fill(null));\n    const fileInputRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const [selectedImage, setSelectedImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedIndex, setSelectedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setIsClient(true);\n        try {\n            const savedImages = localStorage.getItem(\"grid-\".concat(type));\n            if (savedImages) {\n                const parsedImages = JSON.parse(savedImages);\n                console.log(\"Loading images for grid \".concat(type, \":\"), parsedImages);\n                setImages(parsedImages);\n            }\n        } catch (error) {\n            console.error(\"Error loading images:\", error);\n        }\n    }, [\n        type\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) {\n            try {\n                console.log(\"Saving images for grid \".concat(type, \":\"), images);\n                const success = saveToLocalStorage(\"grid-\".concat(type), JSON.stringify(images));\n                if (!success) {\n                    console.warn(\"Failed to save images to localStorage\");\n                    // Try to clear other data to make space\n                    try {\n                        for(let i = 1; i <= 3; i++){\n                            if (i !== type) {\n                                localStorage.removeItem(\"grid-\".concat(i));\n                            }\n                        }\n                        // Try saving again\n                        const retrySuccess = saveToLocalStorage(\"grid-\".concat(type), JSON.stringify(images));\n                        if (!retrySuccess) {\n                            console.error(\"Failed to save images even after cleanup\");\n                        }\n                    } catch (error) {\n                        console.error(\"Error during storage cleanup:\", error);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error saving images:\", error);\n            }\n        }\n    }, [\n        images,\n        type,\n        isClient\n    ]);\n    const handleImageUpload = async (index, event)=>{\n        var _event_target_files;\n        const file = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n        if (file) {\n            console.log(\"Loading image:\", file.name, \"Size:\", file.size);\n            try {\n                const loadingToast = sonner__WEBPACK_IMPORTED_MODULE_2__.toast.loading(\"Processing image...\");\n                const reader = new FileReader();\n                reader.onload = async ()=>{\n                    try {\n                        const result = reader.result;\n                        console.log(\"File read successfully, length:\", result.length);\n                        // Create a temporary image to verify loading\n                        const tempImg = new Image();\n                        tempImg.onload = async ()=>{\n                            try {\n                                console.log(\"Image dimensions:\", tempImg.width, \"x\", tempImg.height);\n                                const compressedImage = await compressImage(result);\n                                console.log(\"Compressed image size:\", compressedImage.length);\n                                const newImages = [\n                                    ...images\n                                ];\n                                newImages[index] = compressedImage;\n                                setImages(newImages);\n                                // Verify the image is valid after compression\n                                const verifyImg = new Image();\n                                verifyImg.onload = ()=>{\n                                    console.log(\"Image verified after compression\");\n                                    const success = saveToLocalStorage(\"grid-\".concat(type), JSON.stringify(newImages));\n                                    sonner__WEBPACK_IMPORTED_MODULE_2__.toast.dismiss(loadingToast);\n                                    if (success) {\n                                        sonner__WEBPACK_IMPORTED_MODULE_2__.toast.success(\"Image uploaded successfully\");\n                                    } else {\n                                        sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to save image. Please try a smaller image.\");\n                                    }\n                                };\n                                verifyImg.onerror = ()=>{\n                                    console.error(\"Failed to verify compressed image\");\n                                    sonner__WEBPACK_IMPORTED_MODULE_2__.toast.dismiss(loadingToast);\n                                    sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Error processing image. Please try again.\");\n                                };\n                                verifyImg.src = compressedImage;\n                            } catch (error) {\n                                console.error(\"Error during compression:\", error);\n                                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.dismiss(loadingToast);\n                                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Error processing image. Please try again.\");\n                            }\n                        };\n                        tempImg.onerror = (error)=>{\n                            console.error(\"Error loading original image:\", error);\n                            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.dismiss(loadingToast);\n                            sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Error loading image. Please try a different image.\");\n                        };\n                        tempImg.src = result;\n                    } catch (error) {\n                        console.error(\"Error processing image data:\", error);\n                        sonner__WEBPACK_IMPORTED_MODULE_2__.toast.dismiss(loadingToast);\n                        sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Error processing image. Please try a different image.\");\n                    }\n                };\n                reader.onerror = (error)=>{\n                    console.error(\"Error reading file:\", error);\n                    sonner__WEBPACK_IMPORTED_MODULE_2__.toast.dismiss(loadingToast);\n                    sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Error reading image file\");\n                };\n                reader.readAsDataURL(file);\n            } catch (error) {\n                console.error(\"Error during upload:\", error);\n                sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Error uploading image\");\n            }\n        }\n    };\n    const handleSquareClick = (index)=>{\n        if (images[index]) {\n            setSelectedImage(images[index]);\n            setSelectedIndex(index);\n        } else {\n            var _fileInputRefs_current_index;\n            (_fileInputRefs_current_index = fileInputRefs.current[index]) === null || _fileInputRefs_current_index === void 0 ? void 0 : _fileInputRefs_current_index.click();\n        }\n    };\n    const getSquareClassName = (index)=>{\n        const baseClasses = \"\\n      relative rounded-xl overflow-hidden\\n      transform-gpu transition-all duration-[800ms] ease-out\\n      hover:scale-[1.02] cursor-pointer group\\n      border-2\\n      flex items-stretch justify-center\\n    \";\n        // Type 1: Center square is double width\n        if (type === 1) {\n            if (index === 4) {\n                return \"\".concat(baseClasses, \" w-[520px] h-[250px]\");\n            }\n            if (index === 5) {\n                return \"hidden\";\n            }\n        }\n        return \"\".concat(baseClasses, \" w-[250px] h-[250px]\");\n    };\n    const gridClassName = ()=>{\n        if (type === 1) {\n            return \"grid grid-cols-3 gap-[10px] [&>div:nth-child(5)]:col-span-2\";\n        }\n        return \"grid grid-cols-3 gap-[10px]\";\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"mb-8\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"\".concat(gridClassName(), \" max-w-[1200px] mx-auto\"),\n                children: Array.from({\n                    length: 9\n                }).map((_, index)=>{\n                    const image = images[index];\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: getSquareClassName(index),\n                        style: {\n                            borderColor,\n                            minHeight: \"250px\",\n                            display: type === 1 && index === 5 ? \"none\" : \"flex\",\n                            position: \"relative\",\n                            overflow: \"hidden\"\n                        },\n                        onClick: ()=>handleSquareClick(index),\n                        children: [\n                            image ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: image,\n                                alt: \"Grid \".concat(type, \" Image \").concat(index + 1),\n                                className: \"w-full h-full object-cover transform-gpu transition-all duration-[800ms] ease-out group-hover:scale-100\",\n                                style: {\n                                    objectFit: \"cover\",\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    display: \"block\"\n                                },\n                                onLoad: ()=>console.log(\"Image \".concat(index, \" loaded successfully\")),\n                                onError: (e)=>{\n                                    console.error(\"Error loading image \".concat(index, \":\"), e);\n                                    const target = e.target;\n                                    target.onerror = null;\n                                    // Try to reload the image\n                                    if (image && !image.includes(\"?retry\")) {\n                                        target.src = image + \"?retry=1\";\n                                    } else {\n                                        target.src = \"\";\n                                        sonner__WEBPACK_IMPORTED_MODULE_2__.toast.error(\"Failed to load image \".concat(index + 1));\n                                    }\n                                }\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 300,\n                                columnNumber: 17\n                            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full h-full flex items-center justify-center\",\n                                style: {\n                                    backgroundColor: emptySquareColor,\n                                    position: \"absolute\",\n                                    top: 0,\n                                    left: 0,\n                                    zIndex: 0\n                                },\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    style: {\n                                        color: textColor\n                                    },\n                                    className: \"text-lg\",\n                                    children: \"Click to Upload\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                                    lineNumber: 335,\n                                    columnNumber: 19\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 325,\n                                columnNumber: 17\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                type: \"file\",\n                                ref: (el)=>{\n                                    if (fileInputRefs.current) {\n                                        fileInputRefs.current[index] = el;\n                                    }\n                                },\n                                onChange: (e)=>handleImageUpload(index, e),\n                                accept: \"image/*\",\n                                className: \"hidden\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 340,\n                                columnNumber: 15\n                            }, undefined)\n                        ]\n                    }, index, true, {\n                        fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                        lineNumber: 287,\n                        columnNumber: 13\n                    }, undefined);\n                })\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                lineNumber: 283,\n                columnNumber: 7\n            }, undefined),\n            selectedImage && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n                onClick: ()=>{\n                    setSelectedImage(null);\n                    setSelectedIndex(null);\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"relative max-w-[90vw] max-h-[90vh]\",\n                    onClick: (e)=>e.stopPropagation(),\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                            src: selectedImage,\n                            alt: \"Enlarged view\",\n                            className: \"max-w-full max-h-[90vh] object-contain rounded-3xl border-4 cursor-pointer\",\n                            style: {\n                                borderColor\n                            },\n                            onClick: ()=>{\n                                if (selectedIndex !== null) {\n                                    var _fileInputRefs_current_selectedIndex;\n                                    (_fileInputRefs_current_selectedIndex = fileInputRefs.current[selectedIndex]) === null || _fileInputRefs_current_selectedIndex === void 0 ? void 0 : _fileInputRefs_current_selectedIndex.click();\n                                }\n                            }\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                            lineNumber: 366,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            className: \"absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-8 h-8 flex items-center justify-center hover:bg-opacity-70 transition-all\",\n                            onClick: ()=>{\n                                setSelectedImage(null);\n                                setSelectedIndex(null);\n                            },\n                            children: \"\\xd7\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                            lineNumber: 377,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                    lineNumber: 365,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n                lineNumber: 358,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\hphuc\\\\Desktop\\\\4u\\\\components\\\\ImageGrid.tsx\",\n        lineNumber: 282,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ImageGrid, \"mL8XVepx2G8Mdb6GP40oAt0fumM=\");\n_c = ImageGrid;\n/* harmony default export */ __webpack_exports__[\"default\"] = (ImageGrid);\nvar _c;\n$RefreshReg$(_c, \"ImageGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/ImageGrid.tsx\n"));

/***/ })

});